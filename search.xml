<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog/文档处理/hexo博客1.md</title>
    <url>/2022/09/25/blog-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86-hexo%E5%8D%9A%E5%AE%A21-md/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>//about</url>
    <content><![CDATA[<h1 id="Who-am-i"><a href="#Who-am-i" class="headerlink" title="Who am i?"></a>Who am i?</h1>]]></content>
  </entry>
  <entry>
    <title>第四篇测试</title>
    <url>/2022/09/25/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>post</title>
    <url>/2022/09/25/Linux/Git%E4%BD%BF%E7%94%A8/Git%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p>
<p>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</p>
]]></content>
  </entry>
  <entry>
    <title>不知道</title>
    <url>//%E4%B8%8D%E7%9F%A5%E9%81%93</url>
    <content><![CDATA[<p>还可以利用符号连接的方式解决图片不显示的问题，适用于图片量较少的情况下或本地已存在较多用Typora原本格式的文件</p>
<pre><code>站点配置文件post_asset_folder为false
打开Typora，点击文件---偏好设置---图像，修改为如下设置
</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/25/blog/%E5%9B%BE%E9%9D%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E7%94%BB2/</url>
    <content><![CDATA[<p>“测试图片处理” </p>
]]></content>
  </entry>
  <entry>
    <title>post</title>
    <url>/2022/09/25/blog/%E5%9B%BE%E9%9D%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E7%94%BB32/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">------------------------------------------------</span><br><span class="line">|                                              |</span><br><span class="line">|              __     ________ _____           |</span><br><span class="line">|            /\\ \   / /  ____|  __ \          |</span><br><span class="line">|           /  \\ \_/ /| |__  | |__) |         |</span><br><span class="line">|          / /\ \\   / |  __| |  _  /          |</span><br><span class="line">|         / ____ \| |  | |____| | \ \          |</span><br><span class="line">|        /_/    \_\_|  |______|_|  \_\         |</span><br><span class="line">|                                              |</span><br><span class="line">|             感谢使用 Ayer 主题 !             |</span><br><span class="line">|   文档: https://shen-yu.gitee.io/2019/ayer/  |</span><br><span class="line">|                                              |</span><br><span class="line">------------------------------------------------</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/25/blog/%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86/hexo%E5%8D%9A%E5%AE%A21/</url>
    <content><![CDATA[<p>“asdfghjkkl” </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/25/blog/%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86/hexo%E5%8D%9A%E5%AE%A22/</url>
    <content><![CDATA[<p>“asdfghjkkl” </p>
]]></content>
  </entry>
  <entry>
    <title>算法做题学习.md</title>
    <url>//%E7%AE%97%E6%B3%95%E5%81%9A%E9%A2%98%E5%AD%A6%E4%B9%A0.md</url>
    <content><![CDATA[<h1 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h1><p>第一遍，草稿</p>
<h2 id="整理的大体流程如下："><a href="#整理的大体流程如下：" class="headerlink" title="整理的大体流程如下："></a>整理的大体流程如下：</h2><ul>
<li>题目名称（具体题目内容就不写了，可以查看leetcode网站）</li>
<li>解法思路</li>
<li>涉及到的基础知识点</li>
</ul>
<h1 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h1><ol>
<li>字符串</li>
<li>数组</li>
<li>链表<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
优点：</li>
</ol>
<ul>
<li>结构简单的动态数据结构</li>
<li>创建时，无需知道链表的长度</li>
<li>当插入新节点时，只需要为新节点分配内存，然后调整指针的指向来确保新节点被链接到链表中。</li>
<li>内存分配不是在创建时一次性分配，（这与数组不同），而是添加节点时，单独给节点分配。（因为没有闲置的内存，所以链表的空间效率比数组高）</li>
</ul>
<p>缺点：</p>
<ul>
<li>由于内存空间不是一次性分配，导致无法保证链表的内存是连续的，因为如果想在链表中查找第i个节点，无法像数组一样使用下标在O(1)时间内找到，只能从头节点开始，沿着指针遍历，时间效率为O(n)</li>
</ul>
<p>《剑指Offer2》对应题目：</p>
<ul>
<li>6 从尾到头打印链表</li>
<li>18 删除链表的节点</li>
<li>22 链表倒数第k个节点</li>
<li>24 反转链表</li>
<li>25 合并两个排序的链表</li>
<li>52 两个链表的第一个公共节点</li>
<li>62 圆圈中最后剩下的数字 （把链表的末尾节点的指针指向头结点，从而形成一个环形链表）</li>
<li>36 二叉搜索数与双向链表 （链表中的节点还可以指向前一个节点，形成双向链表）</li>
<li>35 复杂链表的复制 （链表中的节点，还有指向任意节点的指针）</li>
</ul>
<p>树，常考的是二叉树</p>
<ul>
<li>每个节点最多只能有两个子节点，叶结点，就是最末端的节点，没有子节点，根节点没有父节点</li>
<li>二叉树中最重要的操作是，遍历，按照某一顺序访问树中所有节点<ul>
<li>前序遍历： 先访问根节点，再访问左子节点，最后访问右子节点</li>
<li>中序遍历： 先访问左子节点，再访问根节点，最后访问右子节点</li>
<li>后序遍历： 先左子节点，再右子节点，最后根节点</li>
<li><strong>注意：</strong>，前，中，后序，是根据 根节点的访问位置来定的</li>
<li><strong>注意：</strong>，三种遍历，都有循环和递归，两种不同的访问方式</li>
</ul>
</li>
</ul>
<p>宽度优先遍历：</p>
<ul>
<li>先访问数的第一层节点，再访问树的第二层节点…一直到访问到最下面一层节点。</li>
<li>在同一层节点中，以从左到右的顺序依次访问。</li>
</ul>
<p>二叉树有很多特例：</p>
<ul>
<li>二叉搜索树<ul>
<li>特点：左子节点总&lt;&#x3D; 根节点</li>
<li>右子节点总&gt;&#x3D;根节点</li>
<li>我们可以平均在O(logn)的时间内根据数值在二叉搜索树中找到一个节点</li>
</ul>
</li>
<li>堆<ul>
<li>最大堆 <em>根节点的值最大</em></li>
<li>最小堆 <em>根节点的值最小</em></li>
<li>使用场景：在一些需要 快速找到最大值或者最小值的问题中，可以使用堆来处理</li>
</ul>
</li>
<li>红黑树<ul>
<li>把树中的节点定义为<em>红</em>，<em>黑</em>，两种颜色，并通过规则确保从根节点到叶节点的最长路径的长度&lt;&#x3D;最短路径的2倍</li>
<li>java中hashmap基于红黑树实现的</li>
</ul>
</li>
</ul>
<p>《剑指Offer2》对应题目：</p>
<ul>
<li>考察遍历的具体代码实现<ul>
<li>26 树的子结构</li>
<li>34 二叉树中和为某一值的路径</li>
<li>55 二叉树的深度</li>
</ul>
</li>
<li>考察对遍历特点的理解<ul>
<li>7 重建二叉树</li>
</ul>
</li>
<li>建议：对前序，中序，后序，这三种遍历的6种实现方式掌握到了如指掌的地步</li>
<li>考察宽度优先遍历算法<ul>
<li>32 从上到下打印二叉树</li>
</ul>
</li>
<li>考察二叉搜索树<ul>
<li>36 二叉搜索树与双向链表</li>
<li>68 树中两个节点的 最低公共祖先</li>
</ul>
</li>
<li>考察堆和红黑树<ul>
<li>40 最小的k个数</li>
</ul>
</li>
</ul>
<p>栈</p>
<ul>
<li><p>特点：后进先出，即最后一个被压入push栈的元素会第一个被弹出pop</p>
</li>
<li><p>不考虑排序的数据结构</p>
</li>
<li><p>需要O(n)时间才能找到栈中最大或者最小的元素</p>
</li>
<li><p>31 栈的压入，弹出序列</p>
</li>
<li><p>30 包含min函数的栈</p>
</li>
</ul>
<p>队列</p>
<ul>
<li><p>特点：先进先出，即第一个进入队列的元素将会第一个出来</p>
</li>
<li><p>队列与栈的元素压入弹出顺序相反</p>
</li>
<li><p>32 从上到下打印二叉树</p>
</li>
</ul>
<p>使用java中的Queue方法时的注意事项</p>
<ul>
<li>队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作。</li>
<li>LinkedList类实现了Queue接口，因此我们可以把LinkedList当成Queue来用。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//add()和remove()方法在失败的时候会抛出异常(不推荐)</span></span><br><span class="line"><span class="comment">// 添加元素使用offer</span></span><br><span class="line">queue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 删除元素，使用poll</span></span><br><span class="line">queue.poll(); <span class="comment">// 返回第一个元素，并在队列中删除</span></span><br><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">queue.peek()</span><br><span class="line"></span><br><span class="line">注意：Queue中，方法offer与add，poll与remove，peek与element这三对的区别</span><br><span class="line"><span class="number">1.</span> offer与add:</span><br><span class="line">    - 一些队列有大小限制，因此，如果当一个队列容量满了的时候，再添加元素，多出来的元素会被拒绝。这时，如果调用的是add方法，则会抛出unchecked异常，而offer不会抛出异常，只会返回<span class="literal">false</span>。</span><br><span class="line"><span class="number">2.</span> poll与remove：</span><br><span class="line">    - 两者都是从队列中删除第一个元素，当用空集合调用时，remove()的行为与Collection接口的版本相似，会抛出异常，而poll()只会返回<span class="literal">null</span>，不会抛出异常</span><br><span class="line"><span class="number">3.</span> peek()与element()：</span><br><span class="line">    - 两者都用于在队列的头部查询元素。与remove()方法类似，在队列为空时，element()会抛出异常，而peek()返回<span class="literal">null</span>。</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><p>总结：<br>很多算法都可以使用<code>递归</code>和<code>循环</code>两种不同的方式实现。通常基于递归的实现方法代码会比较简洁，但性能不如基于循环的实现方式。实际使用中，需要根据情况选择合适的方法。</p>
<p>通常排序和查找是面试时考查算法的重点。在准备面试的时候，我们应该重点掌握二分查找、归并排序和快速排序，做到能随时正确、完整地写出代码。</p>
<p>如果面试题要求在二维数组（可能具体表现为迷宫或者棋盘等）上搜索路径，那么我们可以尝试用回溯法。通常回溯法很适合用递归的代码实现。<br>    - 只有当面试官限定不可以使用递归实现的时候，我们再考虑用栈来模拟递归的过程。</p>
<ol>
<li>查找和排序</li>
</ol>
<p>排序长度为n的数组，需要O(nlogn)的时间</p>
<p>递归与循环</p>
<p>递归的本质就是一个栈结构，（先进后出）<br>递归的优点：</p>
<p>缺点：</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>常用排序算法：</p>
<ul>
<li>冒泡排序，插入排序，选择排序，快速排序，归并排序，计数排序，基数排序，桶排序</li>
</ul>
<p>复杂度归类</p>
<ul>
<li>O(n^2), 冒泡排序，插入排序，选择排序</li>
<li>O(nlogn), 快速排序，归并排序</li>
<li>O(n), 计数排序，基数排序，桶排序</li>
</ul>
<p>关注排序比较和交换的次数</p>
<p>通用排序函数为什么选择快排？</p>
<ol>
<li>线性排序，时间复杂度为O(n)的三种排序方式，的使用场景特殊，如果要写一个通用的排序函数，不能选择线性排序；</li>
<li>为了兼顾任意规模数据的排序，一般会首选时间复杂度为O(nlogn)的排序算法来实现排序函数；</li>
<li>同为O(nlogn)的快排和归并排序，归并排序不是原地排序算法</li>
</ol>
<ul>
<li>所以最优的选择是快排</li>
</ul>
<p>如何优化快速排序？</p>
<ol>
<li>导致快速排序时间复杂度降为O(n^2)的原因是分区点选择的不合理，最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多。</li>
</ol>
<p>优化分区点的选择：</p>
<ol>
<li>随机发：每次从要排序的区间中，随机选择一个元素作为分区点；<ul>
<li>《剑指Offer》中好像有提到</li>
</ul>
</li>
<li>三数区中法（或N数取中法，取决于数据量）<ul>
<li>从区间的首、中、尾分别取一个数，比较大小，取中间值作为分区点</li>
<li>如果要排序的数组较大，可以选择“5数中”，“10数区中”…</li>
</ul>
</li>
</ol>
<p>警惕快排的递归发生堆栈溢出</p>
<ol>
<li>限制递归深度，一旦递归超过了设置的阈值就停止递归</li>
<li>在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈过程，这样就没有系统栈大小的限制<ul>
<li>方法2更好一些</li>
</ul>
</li>
</ol>
<p>通用排序函数实现技巧</p>
<ol>
<li>数据量不大时，O(n^2)排序算法不一定比O(nlogn)排序算法执行的时间长</li>
<li>数据量大时，优化快排区分点的选择</li>
<li>防止堆栈溢出，可以选择在堆上手动模拟调用栈来解决</li>
<li>在排序区间中，当元素个数小于某个常数量时，可以考虑使用O(n^2)的插入排序</li>
<li>用哨兵简化代码，每次排序都减少一次判断，尽可能把性能优化到极致</li>
</ol>
<h1 id="面试提示"><a href="#面试提示" class="headerlink" title="面试提示"></a>面试提示</h1><ol>
<li>面试中，如果我们打算修改输入的数据或者数据结构，最好先问一下面试官是不是允许修改。</li>
</ol>
<h1 id="题目的解法积累"><a href="#题目的解法积累" class="headerlink" title="题目的解法积累"></a>题目的解法积累</h1><h3 id="1-two-sum两数之和"><a href="#1-two-sum两数之和" class="headerlink" title="1. two sum两数之和"></a>1. two sum两数之和</h3><ul>
<li>解法思路<ol>
<li>暴力两层循环</li>
<li>利用哈希表来处理<ul>
<li>利用hash表处理也有两种方式<ol>
<li>先全部放到HashMap中，然后再通过判断差值是否再HashMap中处理；</li>
<li>优化1中的方法，减少依次循环，直接边放入HashMap中，边判断差值是否在HashMap中；</li>
</ol>
</li>
<li>利用将数组值和索引放入哈希表的方法来遍历处理</li>
<li>保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。key-value</li>
<li>特点：利用空间换取速度，空间复杂度会随着hash表中存储元素的数量线性增加</li>
</ul>
</li>
</ol>
</li>
<li>涉及到的基础知识点：<ul>
<li>hash表<ul>
<li>能很好处理key-value对应，</li>
<li>hash表的取值速度较快，在没有hash冲突的情况下，hash的查找时间为O(1)，（有hash冲突时为O(n)）</li>
<li>利用空间换取速度，空间复杂度会随着hash表中存储元素的数量线性增加</li>
<li>扩展：看jdk中关于HashMap的实现，和其常用的api，（可以直接看极客时间中订阅的java面试中的HashMap的分析）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-整数反转"><a href="#2-整数反转" class="headerlink" title="2. 整数反转"></a>2. 整数反转</h3><p>这题主要利用，数学方法中弹出和推入数字，同时进行溢出前检查<br>注意理解一下解法中7，-8的由来，</p>
<h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h3><p>关键词：排序数组</p>
<p>主体思想：排除法（减治思想）</p>
<p>应用场景：二分查找相关问题</p>
<p>注意点：</p>
<ol>
<li><p>无条件写上while(left &lt; right) ，表示退出循环的条件时left&#x3D;&#x3D;right，这时不需要考虑返回的左右边界的问题</p>
</li>
<li><p>先写下取中间数取法，然后从如何把mid值排除掉的角度考虑如何写<code>if</code>和<code>else</code>语句</p>
<blockquote>
<p>写的时候把注释写上，1. 把“什么时候不是目标元素”作为注释写下来，提醒自己要判断正确，2. 判读mid分到左边还是右边，写下“下一轮搜索区间范围”作为注释写进代码</p>
</blockquote>
</li>
<li><p>当分支逻辑出现<code>left = mid</code>的时候，要修改取中间数的行为，使其上取整。</p>
</li>
<li><p>理解取中间数的方式</p>
<ul>
<li>普通方式：(a + b)&#x2F;2</li>
<li>利用数学方式变形防止溢出： a + (b - a)&#x2F;2 <blockquote>
<p>这样可以防止a+b整形溢出</p>
</blockquote>
</li>
<li>利用java中的无符号右移： (a + b) &gt;&gt;&gt; 1<blockquote>
<p>注意这里是<code>&gt;&gt;&gt;</code>(无符号右移) 而不是<code>&gt;&gt;</code>(有符号右移),java中二者有区别，涉及到<code>补码</code>的知识点，具体看5</p>
</blockquote>
</li>
</ul>
</li>
<li><p>借鉴java中的无符号右移<code>&gt;&gt;&gt;</code>的特殊语法</p>
<blockquote>
<p>无符号右移 <code>&gt;&gt;&gt;</code> 在对操作数右移以后，不论这个数是正数还是负数，高位一律补 <code>0</code>。使用无符号右移的好处是：<strong>即使在 left + right 整形溢出以后，得到的结果依然正确</strong>。<br>(从JDK的源码中借鉴来的<code>Arrays.binarySearch()</code> 方法)</p>
</blockquote>
</li>
</ol>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul>
<li><p>二叉树，</p>
</li>
<li><p>二叉搜索树</p>
<p>  遍历方法：</p>
<p>  三种遍历方法，分别有什么特殊作用？</p>
<ul>
<li>前序</li>
<li>中序</li>
<li>后序</li>
</ul>
</li>
</ul>
<p>二叉搜索树的中序遍历，刚好可以输出一个升序数组<br>    - leetcode 98，99</p>
<p>给出一个升序数据，可以还原二叉搜索树</p>
<p>根据中序遍历+前序&#x2F;后序遍历 可以还原一课二叉树</p>
<p>前序&#x2F;后序遍历的作用？提供根节点，根据根节点可以递归生成左右子树</p>
<ul>
<li>递归处理</li>
<li>迭代处理</li>
</ul>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>1. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个内容要验证一下：</span><br><span class="line"></span><br><span class="line">一、取余运算和取模运算的异同</span><br><span class="line"></span><br><span class="line">这个题目最开始，我还是分正负数来考虑的，因为我印象里记得 %</span><br><span class="line">对正数和负数的运算好像有区别。最后去查了一下，补充在这里。</span><br><span class="line">C/C++ 和 Java 一样，% 是取余运算；而 Python 的 % 是取模运算。</span><br><span class="line">取余运算和取模运算的区别：</span><br><span class="line">对于整型数 a，b</span><br><span class="line"></span><br><span class="line">a，b 来说，取余运算或者取模运算的方法都是下面两步：</span><br><span class="line"></span><br><span class="line">    求整数商： c=a/b</span><br><span class="line"></span><br><span class="line">c=a/b</span><br><span class="line">计算余数或者模： r=a−c⋅b</span><br><span class="line"></span><br><span class="line">    r=a−c⋅b</span><br><span class="line"></span><br><span class="line">而两者的区别就在于第一步不同：取余运算在取c</span><br><span class="line">c的值时，向 00 方向舍入，而取模运算在计算cc的值时，则是向负无穷方向舍入。</span><br><span class="line">例如计算：−7%4−7%4</span><br><span class="line">第一步：求整数商，取余运算算出的整数商为c=⌈−74⌉=−1c=⌈4−7​⌉=−1，而取模运算算出的整数商为c=⌊−74⌋=−2c=⌊4−7​⌋=−2</span><br><span class="line">第二步：计算余数和模的公式相同，但因cc的值不同，取余的结果为−7−(−1×4)=−3−7−(−1×4)=−3，取模的结果为−7−(−2×4)=1−7−(−2×4)=1。</span><br><span class="line">归纳：当aa和bb符号一致时，取余运算和取模运算的结果一样。</span><br><span class="line">当符号不一致时，结果不一样。取余运算结果的符号和aa一致，取模运算结果的符号和bb一致。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数学计算中，遇到</span><br><span class="line"></span><br><span class="line">区间 [a,b]的集合，</span><br><span class="line"></span><br><span class="line">b-a+1,  当计算集合中元素的个数时使用</span><br><span class="line">    类似于，有5个点，当计算有几个点时是，b-a+1,</span><br><span class="line">                    当计算这5个点之间有几个段落时，b-a</span><br><span class="line"></span><br><span class="line">b-a，   当计算集合的长度/间隔，时使用</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>什么时候用双指针？什么时候用单指针？</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>迈普交换机学习.md</title>
    <url>//%E8%BF%88%E6%99%AE%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AD%A6%E4%B9%A0.md</url>
    <content><![CDATA[<p>以下内容，参考 <strong>MyPower S5820系列交换机命令手册</strong></p>
<p><strong>注意：</strong>通过SSH方式远程进入交换机的时候，默认就是特权模式。下面命令无特殊说明都可以直接执行。（注意看命令提示符）</p>
<h1 id="接口相关操作"><a href="#接口相关操作" class="headerlink" title="接口相关操作"></a>接口相关操作</h1><h2 id="逻辑上启用或关闭一个接口"><a href="#逻辑上启用或关闭一个接口" class="headerlink" title="逻辑上启用或关闭一个接口"></a>逻辑上启用或关闭一个接口</h2><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown  关闭接口</span><br><span class="line"></span><br><span class="line">no shutdown  开启接口</span><br></pre></td></tr></table></figure>

<p>样例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">Hostname#</span><span class="language-bash">configure terminal</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">Hostname(config)#</span><span class="language-bash">interface tengigabitethernet 0/1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">Hostname(config-if-tengigabitethernet0/1)#</span><span class="language-bash">shutdown</span></span><br></pre></td></tr></table></figure>



<h2 id="列出端口信息"><a href="#列出端口信息" class="headerlink" title="列出端口信息"></a>列出端口信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show interface &#123; interface-list | switchport [ brief ] &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>interface-list</em>：指定端口列表。端口列表的表示形式可以是单个或多个端口名称，符号“,”用于分隔不连续的端口名称，“-”用于表示连续的端口名称。</p>
<p><strong>switchport</strong>：所有的端口。</p>
<p><strong>brief</strong>：显示所有端口的摘要信息；当省略这个参数时，表示显示所有端口的全部信息。</p>
</blockquote>
<p>样例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示端口tengigabitethernet0/1的全部信息。</span></span><br><span class="line"><span class="meta prompt_">Hostname#</span><span class="language-bash">show interface te0/1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示所有端口的摘要信息。</span></span><br><span class="line"><span class="meta prompt_">Hostname#</span><span class="language-bash">show interface switchport brief</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作限定</category>
        <category>中电云相关</category>
      </categories>
      <tags>
        <tag>交换机</tag>
      </tags>
  </entry>
</search>
